
# execute with: snakemake -s Snakefile-preprocessing --forceall --resource gpu=1 (--latency-wait 60)
# create DAG plot with: snakemake -s Snakefile-preprocessing --forceall --dag | dot -Tpdf > dag.pdf

from glob import glob
from os import environ
from pathlib import Path

# directive for correct order of execution
ruleorder: preprocessing_gans > preprocessing
# dictionary holding the model's home directories and variant labels
configfile: "variant_config.yaml"

environ['HOME_DIR'      ] = "/mlinfn/shared/lamarr/" + environ['USERNAME']
environ['DATA_STORAGE'  ] = "/mlinfn/minio/lhcb-data/anderlinil/LamarrBenderTrain"
environ['MODEL_STORAGE' ] = environ['HOME_DIR'] + "/trained_models"
environ['NB_EXPORT'     ] = "False"
environ['FEATHER_FOLDER'] = environ['HOME_DIR'] + "/lb-trksim-train/notebooks/feather_folder"

TRAIN_FOLDERS = ['/j100']#[path for path in config['training_folder'].values()]

rule all:
    input:
        #preprocessing      = expand("reports{train_path}/preprocessing.html",train_path=TRAIN_FOLDERS),
        preprocessing_gans = expand("reports{train_path}/preprocessing_gans.html",train_path=TRAIN_FOLDERS)

    output:
        timestamp="reports/all.done"
        
    benchmark:
        "benchmarks/all.txt"
        
    shell:
        "touch {output.timestamp} "

rule preprocessing:
    input:
        notebook="Preprocessing.ipynb",
        data_files= lambda wildcards: glob(environ['DATA_STORAGE']+f"/{wildcards.train_path}/*.root")
       
    output:
        acceptance_preprocessing = environ['MODEL_STORAGE']+"/{train_path}/models/acceptance/tX.pkl",
        efficiency_preprocessing = environ['MODEL_STORAGE']+"/{train_path}/models/efficiency/tX.pkl",
        acceptance_train      = directory(environ['FEATHER_FOLDER']+"/{train_path}/acceptance-train"),
        acceptance_test       = directory(environ['FEATHER_FOLDER']+"/{train_path}/acceptance-test"),
        acceptance_validation = directory(environ['FEATHER_FOLDER']+"/{train_path}/acceptance-validation"),
        efficiency_train      = directory(environ['FEATHER_FOLDER']+"/{train_path}/efficiency-train"),
        efficiency_test       = directory(environ['FEATHER_FOLDER']+"/{train_path}/efficiency-test"),
        efficiency_validation = directory(environ['FEATHER_FOLDER']+"/{train_path}/efficiency-validation")
        
    log:
        "reports/{train_path}/preprocessing.html"
        
    benchmark:
        "benchmarks/{train_path}/preprocessing.txt"
        
    message:
        "Preprocessing data in {wildcards.train_path} for acceptance and efficiency models"
        
    resources:
        gpu=0
   
    shell:
        "INPUT_FILES='{input.data_files}' "
        "TRAINING_DATA_FOLDER={wildcards.train_path} "
        "ACCEPTANCE_PREPROCESSING={output.acceptance_preprocessing} "
        "EFFICIENCY_PREPROCESSING={output.efficiency_preprocessing} "
        "ACCEPTANCE_TRAIN={output.acceptance_train} "
        "ACCEPTANCE_TEST={output.acceptance_test} "
        "ACCEPTANCE_VALIDATION={output.acceptance_validation} "
        "EFFICIENCY_TRAIN={output.efficiency_train} "
        "EFFICIENCY_TEST={output.efficiency_test} "
        "EFFICIENCY_VALIDATION={output.efficiency_validation} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=hep "
        "--no-input --no-prompt   "
        "{input.notebook} --output {log} "


rule preprocessing_gans:
    input:
        notebook="Preprocessing-GANs.ipynb",
        data_files= lambda wildcards: glob(environ['DATA_STORAGE']+f"/{wildcards.train_path}/*.root")
    
    output:
        resolution_preprocessing_x = environ['MODEL_STORAGE']+"/{train_path}/models/resolution/tX.pkl",
        resolution_preprocessing_y = environ['MODEL_STORAGE']+"/{train_path}/models/resolution/tY.pkl",
        resolution_train      = directory(environ['FEATHER_FOLDER']+"/{train_path}/resolution-train"),
        resolution_test       = directory(environ['FEATHER_FOLDER']+"/{train_path}/resolution-test"),
        resolution_validation = directory(environ['FEATHER_FOLDER']+"/{train_path}/resolution-validation"),
        covariance_preprocessing_x = environ['MODEL_STORAGE']+"/{train_path}/models/covariance/tX.pkl",
        covariance_preprocessing_y = environ['MODEL_STORAGE']+"/{train_path}/models/covariance/tY.pkl",
        covariance_train      = directory(environ['FEATHER_FOLDER']+"/{train_path}/covariance-train"),
        covariance_test       = directory(environ['FEATHER_FOLDER']+"/{train_path}/covariance-test"),
        covariance_validation = directory(environ['FEATHER_FOLDER']+"/{train_path}/covariance-validation"),

        
    log:
        "reports/{train_path}/preprocessing_gans.html"
        
    benchmark:
        "benchmarks/{train_path}/preprocessing_gans.txt"
    
    message:
        "Preprocessing data in {wildcards.train_path} for GAN resolution and covariance models"
        
    resources:
        gpu=0
    
    shell:
        "INPUT_FILES='{input.data_files}' "
        "TRAINING_DATA_FOLDER={wildcards.train_path} "
        "RESOLUTION_PREPROCESSING_X={output.resolution_preprocessing_x} "
        "RESOLUTION_PREPROCESSING_Y={output.resolution_preprocessing_y} "
        "RESOLUTION_TRAIN={output.resolution_train} "
        "RESOLUTION_TEST={output.resolution_test} "
        "RESOLUTION_VALIDATION={output.resolution_validation} "
        "COVARIANCE_PREPROCESSING_X={output.covariance_preprocessing_x} "
        "COVARIANCE_PREPROCESSING_Y={output.covariance_preprocessing_y} "
        "COVARIANCE_TRAIN={output.covariance_train} "
        "COVARIANCE_TEST={output.covariance_test} "
        "COVARIANCE_VALIDATION={output.covariance_validation} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=hep "
        "--no-input --no-prompt   "
        "{input.notebook} --output {log}"
